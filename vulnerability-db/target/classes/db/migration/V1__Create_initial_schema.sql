-- Initial database schema for Bastion vulnerability database

-- Scan results table
CREATE TABLE IF NOT EXISTS scan_results (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_group_id VARCHAR(255) NOT NULL,
    project_artifact_id VARCHAR(255) NOT NULL,
    project_version VARCHAR(100),
    project_name VARCHAR(255),
    project_description TEXT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    scan_type VARCHAR(50),
    configuration_json TEXT,
    critical_vulnerabilities INT DEFAULT 0,
    high_vulnerabilities INT DEFAULT 0,
    medium_vulnerabilities INT DEFAULT 0,
    low_vulnerabilities INT DEFAULT 0,
    multi_module BOOLEAN DEFAULT FALSE,
    root_group_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Projects table for tracking unique project information
CREATE TABLE IF NOT EXISTS projects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    group_id VARCHAR(255) NOT NULL,
    artifact_id VARCHAR(255) NOT NULL,
    version VARCHAR(100),
    name VARCHAR(255),
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(group_id, artifact_id, version)
);

-- Scan sessions table for tracking scan sessions
CREATE TABLE IF NOT EXISTS scan_sessions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id BIGINT NOT NULL,
    scan_type VARCHAR(50),
    scanner_version VARCHAR(100),
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status VARCHAR(50),
    configuration TEXT,
    total_dependencies INT DEFAULT 0,
    vulnerable_dependencies INT DEFAULT 0,
    total_vulnerabilities INT DEFAULT 0,
    critical_count INT DEFAULT 0,
    high_count INT DEFAULT 0,
    medium_count INT DEFAULT 0,
    low_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Dependencies table
CREATE TABLE IF NOT EXISTS scan_dependencies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT,
    scan_session_id BIGINT,
    group_id VARCHAR(255) NOT NULL,
    artifact_id VARCHAR(255) NOT NULL,
    version VARCHAR(100),
    scope VARCHAR(50),
    is_direct BOOLEAN DEFAULT FALSE,
    file_path VARCHAR(1000),
    sha1_hash VARCHAR(40),
    sha256_hash VARCHAR(64),
    file_size BIGINT,
    scan_time_ms BIGINT,
    scanner_used VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE,
    FOREIGN KEY (scan_session_id) REFERENCES scan_sessions(id) ON DELETE CASCADE
);

-- Vulnerabilities table
CREATE TABLE IF NOT EXISTS vulnerabilities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cve_id VARCHAR(50) NOT NULL,
    dependency_id BIGINT NOT NULL,
    severity VARCHAR(20),
    cvss_score DECIMAL(3,1),
    description TEXT,
    reference_urls TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dependency_id) REFERENCES scan_dependencies(id) ON DELETE CASCADE
);

-- Performance metrics table
CREATE TABLE IF NOT EXISTS performance_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT NOT NULL,
    total_scan_time_ms BIGINT,
    dependency_resolution_time_ms BIGINT,
    vulnerability_scan_time_ms BIGINT,
    database_storage_time_ms BIGINT,
    total_dependencies_scanned INT,
    cache_hits INT DEFAULT 0,
    cache_misses INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE
);

-- Junction table for scan results and vulnerabilities
CREATE TABLE IF NOT EXISTS scan_result_vulnerabilities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT NOT NULL,
    vulnerability_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE,
    FOREIGN KEY (vulnerability_id) REFERENCES vulnerabilities(id) ON DELETE CASCADE,
    UNIQUE(scan_result_id, vulnerability_id)
);

-- Vulnerability findings per scan session
CREATE TABLE IF NOT EXISTS scan_vulnerabilities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_session_id BIGINT NOT NULL,
    dependency_id BIGINT NOT NULL,
    vulnerability_id VARCHAR(100) NOT NULL,
    confidence VARCHAR(20),
    evidence TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_session_id) REFERENCES scan_sessions(id) ON DELETE CASCADE,
    FOREIGN KEY (dependency_id) REFERENCES scan_dependencies(id) ON DELETE CASCADE
);

-- Junction table for scan results and dependencies
CREATE TABLE IF NOT EXISTS scan_result_dependencies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT NOT NULL,
    dependency_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE,
    FOREIGN KEY (dependency_id) REFERENCES scan_dependencies(id) ON DELETE CASCADE,
    UNIQUE(scan_result_id, dependency_id)
);

-- Performance metrics per scan result
CREATE TABLE IF NOT EXISTS scan_result_performance_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT NOT NULL,
    scan_duration_ms BIGINT,
    processing_time_ms BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE
);

-- Statistics per scan result
CREATE TABLE IF NOT EXISTS scan_result_statistics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_result_id BIGINT NOT NULL,
    total_files_scanned INT DEFAULT 0,
    processed_dependencies INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (scan_result_id) REFERENCES scan_results(id) ON DELETE CASCADE
);

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_scan_results_project ON scan_results(project_group_id, project_artifact_id);
CREATE INDEX IF NOT EXISTS idx_scan_results_time ON scan_results(start_time);
CREATE INDEX IF NOT EXISTS idx_scan_results_multimodule ON scan_results(root_group_id, multi_module);
CREATE INDEX IF NOT EXISTS idx_dependencies_scan ON scan_dependencies(scan_result_id);
CREATE INDEX IF NOT EXISTS idx_dependencies_coords ON scan_dependencies(group_id, artifact_id, version);
CREATE INDEX IF NOT EXISTS idx_vulnerabilities_cve ON vulnerabilities(cve_id);
CREATE INDEX IF NOT EXISTS idx_vulnerabilities_severity ON vulnerabilities(severity);
CREATE INDEX IF NOT EXISTS idx_vulnerabilities_dependency ON vulnerabilities(dependency_id);
CREATE INDEX IF NOT EXISTS idx_projects_coords ON projects(group_id, artifact_id, version);
CREATE INDEX IF NOT EXISTS idx_scan_sessions_project ON scan_sessions(project_id);
CREATE INDEX IF NOT EXISTS idx_scan_sessions_start_time ON scan_sessions(start_time);
CREATE INDEX IF NOT EXISTS idx_scan_result_vulnerabilities_scan ON scan_result_vulnerabilities(scan_result_id);
CREATE INDEX IF NOT EXISTS idx_scan_result_vulnerabilities_vuln ON scan_result_vulnerabilities(vulnerability_id);
CREATE INDEX IF NOT EXISTS idx_scan_vulnerabilities_session ON scan_vulnerabilities(scan_session_id);
CREATE INDEX IF NOT EXISTS idx_scan_vulnerabilities_dependency ON scan_vulnerabilities(dependency_id);
CREATE INDEX IF NOT EXISTS idx_scan_result_dependencies_scan ON scan_result_dependencies(scan_result_id);
CREATE INDEX IF NOT EXISTS idx_scan_result_dependencies_dep ON scan_result_dependencies(dependency_id);
CREATE INDEX IF NOT EXISTS idx_scan_result_performance_metrics_scan ON scan_result_performance_metrics(scan_result_id);
CREATE INDEX IF NOT EXISTS idx_scan_result_statistics_scan ON scan_result_statistics(scan_result_id);