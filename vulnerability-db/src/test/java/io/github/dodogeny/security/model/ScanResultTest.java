package io.github.dodogeny.security.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Nested;

import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("ScanResult Tests")
class ScanResultTest {

    private ScanResult scanResult;
    private List<ScanResult.DependencyResult> dependencies;
    private List<Vulnerability> vulnerabilities;

    @BeforeEach
    void setUp() {
        scanResult = new ScanResult();
        dependencies = new ArrayList<>();
        vulnerabilities = new ArrayList<>();
        
        // Set up basic scan result properties
        scanResult.setProjectGroupId("com.example");
        scanResult.setProjectArtifactId("test-project");
        scanResult.setProjectVersion("1.0.0");
        scanResult.setStartTime(LocalDateTime.now().minusMinutes(5));
        scanResult.setEndTime(LocalDateTime.now());
        scanResult.setScanType("FULL");
    }

    @Nested
    @DisplayName("Vulnerability Mapping Tests")
    class VulnerabilityMappingTest {

        @Test
        @DisplayName("Should correctly map vulnerabilities to JARs using CVE IDs")
        void testVulnerabilityMappingWithCveIds() {
            // Create vulnerabilities with CVE IDs
            Vulnerability vuln1 = createVulnerability("CVE-2021-1234", "vuln-id-1", "CRITICAL");
            Vulnerability vuln2 = createVulnerability("CVE-2021-5678", "vuln-id-2", "HIGH");
            vulnerabilities.add(vuln1);
            vulnerabilities.add(vuln2);
            
            // Create dependency with CVE IDs
            ScanResult.DependencyResult dep1 = createDependency("com.example", "vulnerable-lib", "1.0.0");
            dep1.getVulnerabilityIds().add("CVE-2021-1234");
            dep1.getVulnerabilityIds().add("CVE-2021-5678");
            dependencies.add(dep1);
            
            // Create clean dependency
            ScanResult.DependencyResult dep2 = createDependency("com.example", "clean-lib", "2.0.0");
            dependencies.add(dep2);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Test vulnerable JARs mapping
            List<ScanResult.VulnerableJar> vulnerableJars = scanResult.getVulnerableJars();
            
            assertEquals(1, vulnerableJars.size(), "Should have one vulnerable JAR");
            
            ScanResult.VulnerableJar jarInfo = vulnerableJars.get(0);
            assertEquals("com.example:vulnerable-lib", jarInfo.getName(), "Should have correct JAR name");
            assertEquals("1.0.0", jarInfo.getVersion(), "Should have correct version");
            assertEquals(2, jarInfo.getVulnerabilities().size(), "Should have 2 vulnerabilities");
            assertEquals(1, jarInfo.getCriticalCount(), "Should have 1 critical CVE");
            assertEquals(1, jarInfo.getHighCount(), "Should have 1 high CVE");
            assertEquals(0, jarInfo.getMediumCount(), "Should have 0 medium CVEs");
            assertEquals(0, jarInfo.getLowCount(), "Should have 0 low CVEs");
        }

        @Test
        @DisplayName("Should handle vulnerabilities without CVE IDs using vulnerability ID")
        void testVulnerabilityMappingWithoutCveIds() {
            // Create vulnerability without CVE ID
            Vulnerability vuln1 = createVulnerability(null, "CUSTOM-VULN-001", "HIGH");
            vulnerabilities.add(vuln1);
            
            // Create dependency with vulnerability ID
            ScanResult.DependencyResult dep1 = createDependency("com.example", "custom-lib", "1.5.0");
            dep1.getVulnerabilityIds().add("CUSTOM-VULN-001");
            dependencies.add(dep1);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Test vulnerable JARs mapping
            List<ScanResult.VulnerableJar> vulnerableJars = scanResult.getVulnerableJars();
            
            assertEquals(1, vulnerableJars.size(), "Should have one vulnerable JAR");
            
            ScanResult.VulnerableJar jarInfo = vulnerableJars.get(0);
            assertEquals("com.example:custom-lib", jarInfo.getName(), "Should have correct JAR name");
            assertEquals("1.5.0", jarInfo.getVersion(), "Should have correct version");
            assertEquals(1, jarInfo.getVulnerabilities().size(), "Should have 1 vulnerability");
            assertEquals(1, jarInfo.getHighCount(), "Should have 1 high vulnerability");
        }

        @Test
        @DisplayName("Should handle mixed CVE and non-CVE vulnerabilities correctly")
        void testMixedVulnerabilityMapping() {
            // Create mixed vulnerabilities
            Vulnerability cveVuln = createVulnerability("CVE-2021-1111", "vuln-id-1", "CRITICAL");
            Vulnerability customVuln = createVulnerability(null, "CUSTOM-VULN-002", "MEDIUM");
            vulnerabilities.add(cveVuln);
            vulnerabilities.add(customVuln);
            
            // Create dependency with mixed vulnerability IDs
            ScanResult.DependencyResult dep1 = createDependency("com.example", "mixed-lib", "2.1.0");
            dep1.getVulnerabilityIds().add("CVE-2021-1111");
            dep1.getVulnerabilityIds().add("CUSTOM-VULN-002");
            dependencies.add(dep1);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Test vulnerable JARs mapping
            List<ScanResult.VulnerableJar> vulnerableJars = scanResult.getVulnerableJars();
            
            assertEquals(1, vulnerableJars.size(), "Should have one vulnerable JAR");
            
            ScanResult.VulnerableJar jarInfo = vulnerableJars.get(0);
            assertEquals("com.example:mixed-lib", jarInfo.getName(), "Should have correct JAR name");
            assertEquals(2, jarInfo.getVulnerabilities().size(), "Should have 2 vulnerabilities");
            assertEquals(1, jarInfo.getCriticalCount(), "Should have 1 critical vulnerability");
            assertEquals(1, jarInfo.getMediumCount(), "Should have 1 medium vulnerability");
        }

        @Test
        @DisplayName("Should handle dependencies with no matching vulnerabilities")
        void testDependenciesWithNoVulnerabilities() {
            // Create vulnerability
            Vulnerability vuln1 = createVulnerability("CVE-2021-9999", "vuln-id-1", "LOW");
            vulnerabilities.add(vuln1);
            
            // Create dependency with no vulnerability IDs (clean dependency)
            ScanResult.DependencyResult cleanDep = createDependency("com.example", "clean-lib", "1.0.0");
            // Don't add any vulnerability IDs - this dependency is clean
            dependencies.add(cleanDep);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Test vulnerable JARs mapping
            List<ScanResult.VulnerableJar> vulnerableJars = scanResult.getVulnerableJars();
            
            assertEquals(0, vulnerableJars.size(), "Should have no vulnerable JARs when dependencies have no vulnerability IDs");
        }

        @Test
        @DisplayName("Should handle null and empty vulnerability lists")
        void testNullAndEmptyVulnerabilityLists() {
            // Test with null vulnerabilities
            scanResult.setVulnerabilities(null);
            scanResult.setDependencies(dependencies);
            
            List<ScanResult.VulnerableJar> vulnerableJars = scanResult.getVulnerableJars();
            assertNotNull(vulnerableJars, "Should return non-null list");
            assertTrue(vulnerableJars.isEmpty(), "Should return empty list");
            
            // Test with empty vulnerabilities
            scanResult.setVulnerabilities(new ArrayList<>());
            vulnerableJars = scanResult.getVulnerableJars();
            assertNotNull(vulnerableJars, "Should return non-null list");
            assertTrue(vulnerableJars.isEmpty(), "Should return empty list");
        }
    }

    @Nested
    @DisplayName("Statistics Calculation Tests")
    class StatisticsCalculationTest {

        @Test
        @DisplayName("Should calculate vulnerability statistics correctly")
        void testVulnerabilityStatisticsCalculation() {
            // Create vulnerabilities with different severities
            vulnerabilities.add(createVulnerability("CVE-2021-0001", "v1", "CRITICAL"));
            vulnerabilities.add(createVulnerability("CVE-2021-0002", "v2", "CRITICAL"));
            vulnerabilities.add(createVulnerability("CVE-2021-0003", "v3", "HIGH"));
            vulnerabilities.add(createVulnerability("CVE-2021-0004", "v4", "HIGH"));
            vulnerabilities.add(createVulnerability("CVE-2021-0005", "v5", "HIGH"));
            vulnerabilities.add(createVulnerability("CVE-2021-0006", "v6", "MEDIUM"));
            vulnerabilities.add(createVulnerability("CVE-2021-0007", "v7", "LOW"));
            
            // Create dependencies with these vulnerabilities
            ScanResult.DependencyResult dep1 = createDependency("com.example", "vuln-lib1", "1.0.0");
            dep1.getVulnerabilityIds().addAll(Arrays.asList("CVE-2021-0001", "CVE-2021-0002", "CVE-2021-0003"));
            dependencies.add(dep1);
            
            ScanResult.DependencyResult dep2 = createDependency("com.example", "vuln-lib2", "2.0.0");
            dep2.getVulnerabilityIds().addAll(Arrays.asList("CVE-2021-0004", "CVE-2021-0005", "CVE-2021-0006", "CVE-2021-0007"));
            dependencies.add(dep2);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Calculate and set vulnerability counts based on the vulnerabilities list
            int criticalCount = (int) vulnerabilities.stream().filter(v -> "CRITICAL".equals(v.getSeverity())).count();
            int highCount = (int) vulnerabilities.stream().filter(v -> "HIGH".equals(v.getSeverity())).count();
            int mediumCount = (int) vulnerabilities.stream().filter(v -> "MEDIUM".equals(v.getSeverity())).count();
            int lowCount = (int) vulnerabilities.stream().filter(v -> "LOW".equals(v.getSeverity())).count();
            
            scanResult.setCriticalVulnerabilities(criticalCount);
            scanResult.setHighVulnerabilities(highCount);
            scanResult.setMediumVulnerabilities(mediumCount);
            scanResult.setLowVulnerabilities(lowCount);
            
            // Test statistics
            assertEquals(2, scanResult.getCriticalVulnerabilities(), "Should have 2 critical vulnerabilities");
            assertEquals(3, scanResult.getHighVulnerabilities(), "Should have 3 high vulnerabilities");
            assertEquals(1, scanResult.getMediumVulnerabilities(), "Should have 1 medium vulnerability");
            assertEquals(1, scanResult.getLowVulnerabilities(), "Should have 1 low vulnerability");
            assertEquals(7, scanResult.getTotalVulnerabilities(), "Should have 7 total vulnerabilities");
        }

        @Test
        @DisplayName("Should calculate dependency statistics correctly")
        void testDependencyStatisticsCalculation() {
            // Create mix of vulnerable and clean dependencies
            dependencies.add(createDependency("com.example", "vuln-lib", "1.0.0"));
            dependencies.get(0).getVulnerabilityIds().add("CVE-2021-1111");
            
            dependencies.add(createDependency("com.example", "clean-lib", "2.0.0"));
            dependencies.add(createDependency("org.apache", "another-clean-lib", "3.0.0"));
            
            scanResult.setDependencies(dependencies);
            scanResult.setTotalDependencies(3);
            
            assertEquals(3, scanResult.getTotalDependencies(), "Should have 3 total dependencies");
            assertEquals(1, scanResult.getVulnerableDependencies(), "Should have 1 vulnerable dependency");
            // Calculate clean dependencies = total - vulnerable
            int cleanDependencies = scanResult.getTotalDependencies() - scanResult.getVulnerableDependencies();
            assertEquals(2, cleanDependencies, "Should have 2 clean dependencies");
        }
    }

    @Nested
    @DisplayName("Trend Analysis Tests")
    class TrendAnalysisTest {

        @Test
        @DisplayName("Should generate trend data for reporting")
        void testTrendDataGeneration() {
            // Set up scan result with trend-relevant data
            scanResult.setStartTime(LocalDateTime.now().minusMonths(1));
            scanResult.setEndTime(LocalDateTime.now().minusMonths(1).plusMinutes(10));
            
            // Create vulnerabilities and dependencies
            vulnerabilities.add(createVulnerability("CVE-2021-1001", "v1", "CRITICAL"));
            vulnerabilities.add(createVulnerability("CVE-2021-1002", "v2", "HIGH"));
            
            ScanResult.DependencyResult dep = createDependency("com.example", "trend-lib", "1.0.0");
            dep.getVulnerabilityIds().addAll(Arrays.asList("CVE-2021-1001", "CVE-2021-1002"));
            dependencies.add(dep);
            
            scanResult.setDependencies(dependencies);
            scanResult.setVulnerabilities(vulnerabilities);
            
            // Test trend data properties
            assertNotNull(scanResult.getStartTime(), "Should have start time for trend analysis");
            assertNotNull(scanResult.getEndTime(), "Should have end time for trend analysis");
            assertTrue(scanResult.getTotalVulnerabilities() > 0, "Should have vulnerabilities for trend analysis");
            assertTrue(scanResult.getVulnerableDependencies() > 0, "Should have vulnerable dependencies for trend analysis");
        }
    }

    // Helper methods
    private Vulnerability createVulnerability(String cveId, String id, String severity) {
        Vulnerability vuln = new Vulnerability();
        vuln.setCveId(cveId);
        vuln.setId(id);
        vuln.setSeverity(severity);
        vuln.setDescription("Test vulnerability: " + (cveId != null ? cveId : id));
        vuln.setCvssV3Score(severity.equals("CRITICAL") ? 9.0 : 
                           severity.equals("HIGH") ? 7.0 : 
                           severity.equals("MEDIUM") ? 5.0 : 3.0);
        return vuln;
    }

    private ScanResult.DependencyResult createDependency(String groupId, String artifactId, String version) {
        ScanResult.DependencyResult dep = new ScanResult.DependencyResult();
        dep.setGroupId(groupId);
        dep.setArtifactId(artifactId);
        dep.setVersion(version);
        dep.setScope("compile");
        dep.setDirect(true);
        dep.setVulnerabilityIds(new HashSet<>());
        dep.setScanTimeMs(100);
        dep.setScannerUsed("OWASP");
        return dep;
    }
}