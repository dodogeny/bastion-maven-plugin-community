package io.github.dodogeny.security.scanner;

import io.github.dodogeny.security.model.ScanResult;
import io.github.dodogeny.security.model.Vulnerability;

import java.util.List;
import java.util.concurrent.CompletableFuture;

public interface VulnerabilityScanner {
    
    String getName();
    
    boolean isEnabled();
    
    CompletableFuture<List<Vulnerability>> scanDependencies(List<String> dependencies);
    
    CompletableFuture<ScanResult> scanProject(String projectPath);
    
    boolean supportsBatchScanning();
    
    int getMaxConcurrentScans();
    
    void configure(ScannerConfiguration configuration);
    
    ScannerHealth getHealth();
    
    public static class ScannerConfiguration {
        private String apiKey;
        private String baseUrl;
        private int timeoutMs = 30000;
        private int maxRetries = 3;
        private boolean enableCache = true;
        private String severityThreshold = "MEDIUM";
        private String cacheDirectory;
        private int threadCount = 2;
        private int batchSize = 50;
        private boolean autoUpdate = false;
        private long cacheValidityHours = 6;
        private boolean smartCachingEnabled = true;
        private double updateThresholdPercent = 5.0; // Only update if record count changes by 5% or more
        private boolean enableRemoteValidation = false; // Use local-only cache for unit tests
        
        public String getApiKey() { return apiKey; }
        public void setApiKey(String apiKey) { this.apiKey = apiKey; }
        
        public String getBaseUrl() { return baseUrl; }
        public void setBaseUrl(String baseUrl) { this.baseUrl = baseUrl; }
        
        public int getTimeoutMs() { return timeoutMs; }
        public void setTimeoutMs(int timeoutMs) { this.timeoutMs = timeoutMs; }
        
        public int getMaxRetries() { return maxRetries; }
        public void setMaxRetries(int maxRetries) { this.maxRetries = maxRetries; }
        
        public boolean isEnableCache() { return enableCache; }
        public void setEnableCache(boolean enableCache) { this.enableCache = enableCache; }
        
        public String getSeverityThreshold() { return severityThreshold; }
        public void setSeverityThreshold(String severityThreshold) { this.severityThreshold = severityThreshold; }
        
        public String getCacheDirectory() { return cacheDirectory; }
        public void setCacheDirectory(String cacheDirectory) { this.cacheDirectory = cacheDirectory; }
        
        public int getThreadCount() { return threadCount; }
        public void setThreadCount(int threadCount) { this.threadCount = threadCount; }
        
        public int getBatchSize() { return batchSize; }
        public void setBatchSize(int batchSize) { this.batchSize = batchSize; }
        
        public boolean isAutoUpdate() { return autoUpdate; }
        public void setAutoUpdate(boolean autoUpdate) { this.autoUpdate = autoUpdate; }
        
        public long getCacheValidityHours() { return cacheValidityHours; }
        public void setCacheValidityHours(long cacheValidityHours) { this.cacheValidityHours = cacheValidityHours; }
        
        public boolean isSmartCachingEnabled() { return smartCachingEnabled; }
        public void setSmartCachingEnabled(boolean smartCachingEnabled) { this.smartCachingEnabled = smartCachingEnabled; }
        
        public double getUpdateThresholdPercent() { return updateThresholdPercent; }
        public void setUpdateThresholdPercent(double updateThresholdPercent) { this.updateThresholdPercent = updateThresholdPercent; }
        
        
        public boolean isEnableRemoteValidation() { return enableRemoteValidation; }
        public void setEnableRemoteValidation(boolean enableRemoteValidation) { this.enableRemoteValidation = enableRemoteValidation; }
    }
    
    public static class ScannerHealth {
        private final boolean healthy;
        private final String status;
        private final long lastSuccessfulScanMs;
        private final int totalScansCompleted;
        private final int totalScansFailed;
        
        public ScannerHealth(boolean healthy, String status, long lastSuccessfulScanMs, 
                           int totalScansCompleted, int totalScansFailed) {
            this.healthy = healthy;
            this.status = status;
            this.lastSuccessfulScanMs = lastSuccessfulScanMs;
            this.totalScansCompleted = totalScansCompleted;
            this.totalScansFailed = totalScansFailed;
        }
        
        public boolean isHealthy() { return healthy; }
        public String getStatus() { return status; }
        public long getLastSuccessfulScanMs() { return lastSuccessfulScanMs; }
        public int getTotalScansCompleted() { return totalScansCompleted; }
        public int getTotalScansFailed() { return totalScansFailed; }
    }
}